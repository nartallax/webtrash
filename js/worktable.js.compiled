(function(entryPoint, entryFunction, packageCode, waitLoad, onPackageNotFound){
	"use strict";

	function modNormalize(name){
		var x = name, xx;
		while(true){
			xx = x.replace(/[^\/]+\/\.\.\//g, "");
			if(xx.length === x.length)
				break;
			x = xx;
		}
		while(true){
			xx = x.replace(/\.\//g, "");
			if(xx.length === x.length)
				break;
			x = xx;
		}
		return x;
	}

	function modDirname(name){
		return name.replace(/\/?[^\/]+$/, "");
	}

	function modJoin(){
		var result = [];
		for(var i = 0; i < arguments.length; i++){
			var x = arguments[i];
			(i === 0) || (x = x.replace(/^\//, ""));
			(i === arguments.length - 1) || (x = x.replace(/\/$/, ""));
			x && result.push(x);
		}
		return modNormalize(result.join("/"));
	}

	function resolveModuleName(base, name){
		return name.charAt(0) !== "."? name: modJoin(modDirname(base), name)
	}

	var knownPackages = {
		require: function(name){
			return onPackageNotFound(name);
		}
	}

	function run(){
		var currentPackage = null;

		if("tslib" in packageCode){
			(function(){
				var global = {};
				var window = global;
				var self = global;
				eval(packageCode.tslib);
				if(typeof(global.__awaiter) !== "function"){
					throw new Error("TSLib corrupted.");
				}
				knownPackages.tslib = global;
			})();
		}
		
		function define(reqs, fn){
			var name = currentPackage;
			var pkgs = [];
			var result = null;
			for(var i = 0; i < reqs.length; i++){
				var r = resolveModuleName(name, reqs[i]);
				pkgs.push(r === "exports"? (result = {}): getPackage(r));
			}
			fn.apply(null, pkgs);
			knownPackages[name] = result;
		}
		define.amd = true;

		function getPackage(name){
			if(name in knownPackages)
				return knownPackages[name];
			var code = packageCode[name];
			if(!code)
				return onPackageNotFound(name);
			currentPackage = name;
			try {
				eval(code + "\n//# sourceURL=" + name)
			} catch(e){
				if(typeof(packageEvalExceptionHandler) !== "undefined"){
					packageEvalExceptionHandler(e, name);
				}
				throw e;
			}
			
			return knownPackages[name];
		}

		getPackage(entryPoint)[entryFunction].call(null);
	}
	
	waitLoad(run);
})(
"worktable/worktable_main",
"worktableMain",
{
"worktable/css":"define([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const cssRulesText = `\nbody, html, .worktable {\n\theight: 100vh;\n\twidth: 100vw;\n\tborder: 0;\n\tmargin: 0;\n\tpadding: 0;\n\n\tbackground: #222;\n\tposition: relative;\n\toverflow: hidden;\n}\n\n.worktable-element {\n\tposition: absolute;\n\tcursor: pointer;\n\ttransition: transform 0.1s, opacity 0.1s, left 0.25s linear, top 0.25s linear;\n\n\tuser-select: none;\n\tpadding: 6px;\n\tbox-sizing: border-box;\n}\n\n.worktable-element.empty {\n\tbackground: rgba(255, 255, 255, 0.0);\n\ttransition: 0.25s;\n\tz-index: 0;\n}\n\n.worktable-element.empty:hover {\n\tbackground: rgba(255, 255, 255, 0.05);\n}\n\n.worktable-element.meaningful {\n\tz-index: 1;\n}\n\n.worktable-element.meaningful .background {\n\theight: 100%;\n\twidth: 100%;\n\tbackground: rgba(255, 255, 255, 0.5);\n\ttransition: background 0.25s;\n\tborder-radius: 5px;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n}\n\n\n.worktable-element.meaningful:hover .background {\n\tbackground: rgba(255, 255, 255, 0.75);\n}\n\n.worktable-element .icon-wrap {\n\tflex-grow: 1;\n\tflex-shrink: 1;\n\talign-self: stretch;\n\tpadding: 5px;\n\tmin-height: 0;\n\tflex-basis: 0;\n\ttext-align: center;\n\tpointer-events: none;\n}\n\n.worktable-element .icon {\n\tbox-sizing: border-box;\n\tmax-height: 100%;\n}\n\n.worktable-element .label {\n\tfont-family: Arial;\n\tpadding: 5px;\n\tfont-size: 16px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n\tmax-width: 100%;\n\toverflow: hidden;\n\tbox-sizing: border-box;\n}\n\n`;\n    function putCss() {\n        let style = document.createElement(\"style\");\n        style.textContent = cssRulesText;\n        document.head.appendChild(style);\n    }\n    exports.putCss = putCss;\n});\n",
"worktable/dragger":"define([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function setupDrag(opts) {\n        let dragging = false;\n        let dx = 0, dy = 0;\n        let downListener = (e) => {\n            if (e.button !== 0 || e.shiftKey || e.altKey) {\n                return;\n            }\n            dragging = true;\n            opts.onDragStart && opts.onDragStart();\n            dx = parseFloat(opts.el.style.left) - e.clientX;\n            dy = parseFloat(opts.el.style.top) - e.clientY;\n            document.body.addEventListener(\"mouseup\", upListener);\n            document.body.addEventListener(\"mousemove\", moveListener);\n        };\n        let upListener = () => {\n            finishDrag();\n        };\n        let moveListener = (e) => {\n            if (e.buttons !== 1) {\n                finishDrag();\n            }\n            else {\n                opts.el.style.left = (e.clientX + dx) + \"px\";\n                opts.el.style.top = (e.clientY + dy) + \"px\";\n            }\n        };\n        let finishDrag = () => {\n            if (!dragging)\n                return;\n            dragging = false;\n            document.body.removeEventListener(\"mouseup\", upListener);\n            document.body.removeEventListener(\"mousemove\", moveListener);\n            opts.onDragEnd && opts.onDragEnd();\n        };\n        opts.el.addEventListener(\"mousedown\", downListener);\n    }\n    exports.setupDrag = setupDrag;\n});\n",
"worktable/element":"define([\"require\", \"exports\", \"./dragger\"], function (require, exports, dragger_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class WorktableElement {\n        constructor(opts) {\n            this.root = this.render(opts);\n            this.root.style.left = opts.x + \"px\";\n            this.root.style.top = opts.y + \"px\";\n            this.root.style.height = opts.height + \"px\";\n            this.root.style.width = opts.width + \"px\";\n            this.root.classList.add(\"worktable-element\");\n            this.root.addEventListener(\"dblclick\", () => opts.action());\n        }\n        get x() { return parseFloat(this.root.style.left); }\n        set x(v) { this.root.style.left = v + \"px\"; }\n        get y() { return parseFloat(this.root.style.top); }\n        set y(v) { this.root.style.top = v + \"px\"; }\n        destroy() {\n            this.root.remove();\n        }\n    }\n    exports.WorktableElement = WorktableElement;\n    class EmptyWorktableElement extends WorktableElement {\n        constructor(opts) {\n            super(opts);\n        }\n        render() {\n            let result = document.createElement(\"div\");\n            result.classList.add(\"empty\");\n            return result;\n        }\n    }\n    exports.EmptyWorktableElement = EmptyWorktableElement;\n    class IconWorktableElement extends WorktableElement {\n        constructor(opts) {\n            super(opts);\n        }\n        render(opts) {\n            let result = document.createElement(\"div\");\n            result.classList.add(\"meaningful\");\n            result.style.transform = \"scale(0.5)\";\n            result.style.opacity = \"0.1\";\n            setTimeout(() => {\n                result.style.transform = \"scale(1)\";\n                result.style.opacity = \"1\";\n            }, 1);\n            let background = document.createElement(\"div\");\n            background.classList.add(\"background\");\n            result.appendChild(background);\n            let iconWrap = document.createElement(\"div\");\n            iconWrap.classList.add(\"icon-wrap\");\n            background.appendChild(iconWrap);\n            let icon = document.createElement(\"img\");\n            icon.classList.add(\"icon\");\n            icon.src = opts.iconPath;\n            iconWrap.appendChild(icon);\n            let label = document.createElement(\"div\");\n            label.classList.add(\"label\");\n            label.textContent = opts.text;\n            background.appendChild(label);\n            dragger_1.setupDrag({\n                el: result,\n                onDragStart: () => {\n                    result.style.transition = \"0s\";\n                    opts.dragStart();\n                },\n                onDragEnd: () => {\n                    result.style.transition = \"\";\n                    opts.dragEnd();\n                }\n            });\n            return result;\n        }\n        destroy() {\n            this.root.style.transform = \"scale(0.5)\";\n            this.root.style.opacity = \"0.1\";\n            setTimeout(() => super.destroy(), 100);\n        }\n    }\n    exports.IconWorktableElement = IconWorktableElement;\n});\n",
"worktable/icons":"define([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.randomIconUrls = [\n        \"https://image.flaticon.com/icons/png/512/2339/2339079.png\",\n        \"https://image.flaticon.com/icons/png/512/2339/2339034.png\",\n        \"https://image.flaticon.com/icons/png/512/2339/2339067.png\",\n        \"https://image.flaticon.com/icons/png/512/2339/2339120.png\",\n        \"https://image.flaticon.com/icons/png/512/2339/2339073.png\",\n        \"https://image.flaticon.com/icons/png/512/2339/2339168.png\",\n        \"https://image.flaticon.com/icons/png/512/2231/2231387.png\",\n        \"https://image.flaticon.com/icons/png/512/1909/1909779.png\",\n        \"https://image.flaticon.com/icons/png/512/1118/1118472.png\",\n        \"https://image.flaticon.com/icons/png/512/490/490348.png\"\n    ];\n});\n",
"worktable/name":"define([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.randomNames = [\n        \"Крючкобряк\",\n        \"Бармаглот\",\n        \"Кавардак\",\n        \"Дормидонт\",\n        \"Фома\",\n        \"Эраст\",\n        \"Жимолость\",\n        \"Омуль\",\n        \"Носопырка\",\n        \"Соленоид\",\n        \"Цуцык\",\n        \"Киста\",\n        \"Дистальность\",\n        \"Щедротун\"\n    ];\n});\n",
"worktable/two_dimension_array":"define([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class TwoDimensionArray {\n        constructor(width, height, getDefaultValue) {\n            this.content = [];\n            for (let x = 0; x < width; x++) {\n                let column = [];\n                this.content.push(column);\n                for (let y = 0; y < height; y++) {\n                    column.push(getDefaultValue(x, y));\n                }\n            }\n        }\n        get width() { return this.content.length; }\n        get height() { var _a, _b; return _b = (_a = this.content[0]) === null || _a === void 0 ? void 0 : _a.length, (_b !== null && _b !== void 0 ? _b : 0); }\n        get(x, y) {\n            return this.content[x][y];\n        }\n        set(x, y, v) {\n            this.content[x][y] = v;\n        }\n        forEach(cb) {\n            for (let x = 0; x < this.content.length; x++) {\n                let col = this.content[x];\n                for (let y = 0; y < col.length; y++) {\n                    cb(col[y], x, y);\n                }\n            }\n        }\n    }\n    exports.TwoDimensionArray = TwoDimensionArray;\n});\n",
"worktable/worktable":"define([\"require\", \"exports\", \"./two_dimension_array\", \"./element\", \"./name\", \"./icons\"], function (require, exports, two_dimension_array_1, element_1, name_1, icons_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Worktable {\n        constructor(opts) {\n            this.opts = opts;\n            this.opts.root.classList.add(\"worktable\");\n            let widthPx = opts.root.clientWidth;\n            let heightPx = opts.root.clientHeight;\n            let xElCount = Math.floor(widthPx / opts.element.width);\n            let yElCount = Math.floor(heightPx / opts.element.height);\n            this.offsetX = (widthPx % opts.element.width) / 2;\n            this.offsetY = (heightPx % opts.element.height) / 2;\n            this.elements = new two_dimension_array_1.TwoDimensionArray(xElCount, yElCount, (x, y) => this.getEmptyElement(x, y));\n            this.fillWithRandomElements();\n            this.elements.forEach(el => opts.root.appendChild(el.root));\n        }\n        gridXToCoordX(v) {\n            return this.offsetX + (v * this.opts.element.width);\n        }\n        gridYToCoordY(v) {\n            return this.offsetY + (v * this.opts.element.height);\n        }\n        coordXToGridX(v) {\n            let res = Math.floor((v - this.offsetX + (this.opts.element.width / 2)) / this.opts.element.width);\n            return Math.max(0, Math.min(this.elements.width - 1, res));\n        }\n        coordYToGridY(v) {\n            let res = Math.floor((v - this.offsetY + (this.opts.element.height / 2)) / this.opts.element.height);\n            return Math.max(0, Math.min(this.elements.height - 1, res));\n        }\n        getEmptyElement(x, y) {\n            let el = new element_1.EmptyWorktableElement({\n                ...this.opts.element,\n                x: this.gridXToCoordX(x),\n                y: this.gridYToCoordY(y),\n                action: () => {\n                    this.createIconElementAt(this.coordXToGridX(el.x), this.coordYToGridY(el.y));\n                }\n            });\n            return el;\n        }\n        swap(xa, ya, xb, yb) {\n            let a = this.elements.get(xa, ya);\n            let b = this.elements.get(xb, yb);\n            this.elements.set(xa, ya, b);\n            this.elements.set(xb, yb, a);\n            a.x = this.gridXToCoordX(xb);\n            a.y = this.gridYToCoordY(yb);\n            b.x = this.gridXToCoordX(xa);\n            b.y = this.gridYToCoordY(ya);\n        }\n        getIconElement(x, y) {\n            let dragStartX = 0, dragStartY = 0;\n            let el = new element_1.IconWorktableElement({\n                ...this.opts.element,\n                x: this.gridXToCoordX(x),\n                y: this.gridYToCoordY(y),\n                text: name_1.randomNames[Math.floor(Math.random() * name_1.randomNames.length)],\n                iconPath: icons_1.randomIconUrls[Math.floor(Math.random() * icons_1.randomIconUrls.length)],\n                action: () => {\n                    this.clearElementAt(this.coordXToGridX(el.x), this.coordYToGridY(el.y));\n                },\n                dragStart: () => {\n                    dragStartX = this.coordXToGridX(el.x);\n                    dragStartY = this.coordYToGridY(el.y);\n                },\n                dragEnd: () => {\n                    let newX = this.coordXToGridX(el.x), newY = this.coordYToGridY(el.y);\n                    if (newX === dragStartX && newY === dragStartY) {\n                        el.x = this.gridXToCoordX(newX);\n                        el.y = this.gridYToCoordY(newY);\n                    }\n                    else {\n                        this.swap(newX, newY, dragStartX, dragStartY);\n                    }\n                }\n            });\n            return el;\n        }\n        setElementAt(x, y, el) {\n            this.elements.get(x, y).destroy();\n            this.elements.set(x, y, el);\n            this.opts.root.appendChild(el.root);\n        }\n        createIconElementAt(x, y) {\n            this.setElementAt(x, y, this.getIconElement(x, y));\n        }\n        clearElementAt(x, y) {\n            this.setElementAt(x, y, this.getEmptyElement(x, y));\n        }\n        isOccupiedAt(x, y) {\n            return !(this.elements.get(x, y) instanceof element_1.EmptyWorktableElement);\n        }\n        fillWithRandomElements() {\n            let count = Math.round(Math.random() * 3) + 2;\n            while (count > 0) {\n                let x = Math.floor(Math.random() * this.elements.width);\n                let y = Math.floor(Math.random() * this.elements.height);\n                if (!this.isOccupiedAt(x, y)) {\n                    this.createIconElementAt(x, y);\n                    count--;\n                }\n            }\n        }\n    }\n    exports.Worktable = Worktable;\n});\n",
"worktable/worktable_main":"define([\"require\", \"exports\", \"./css\", \"./worktable\"], function (require, exports, css_1, worktable_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    async function worktableMain() {\n        css_1.putCss();\n        document.title = \"Рабочий стол\";\n        new worktable_1.Worktable({\n            root: document.body,\n            element: {\n                width: 120,\n                height: 120\n            }\n        });\n    }\n    exports.worktableMain = worktableMain;\n});\n"
},
(function(cb){
	var interval = null;
	var loaded = false;
	
	var wcb = function(){
		if(loaded)
			return;
		loaded = true;
		if(interval)
			clearInterval(interval);
		cb();
	}
	
	var checkState = function(){
		if(document && (document.readyState === "interactive" || document.readyState === "complete"))
			wcb();
	}
	
	window.addEventListener("load", wcb);
	document.addEventListener("load", wcb);
	document.addEventListener("readystatechange", checkState);
	interval = setInterval(checkState, 10);
	checkState();
}),
(function(r){throw new Error("Package is not defined by the time it is requested: \"" + r + "\" (or requested directly, which is also forbidden).")})
);